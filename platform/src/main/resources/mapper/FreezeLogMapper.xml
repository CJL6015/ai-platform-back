<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seu.platform.dao.mapper.FreezeLogMapper">

    <resultMap id="BaseResultMap" type="com.seu.platform.dao.entity.FreezeLog">
            <id property="id" column="id" jdbcType="INTEGER"/>
            <result property="startTime" column="start_time" jdbcType="TIMESTAMP"/>
            <result property="endTime" column="end_time" jdbcType="TIMESTAMP"/>
            <result property="lineId" column="line_id" jdbcType="INTEGER"/>
            <result property="state" column="state" jdbcType="INTEGER"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,start_time,end_time,
        line_id,state
    </sql>
    <select id="getHistoryFreeze" resultType="com.seu.platform.model.dto.InspectionHistoryDTO">
        select t1.id                                      as id,
               t1.start_time                              as st,
               t1.end_time                                as et,
               count(t2.people_count - 1)                 as exceeded_num,
               string_agg(t2.detection_picture_path, ',') as image_url
        from freeze_log t1
                 left join dbo.camera_cfg cc on t1.line_id = cc.line_id
                 left join process_line_picture_hist t2
                           on t2.camera_id = cc.camera_ip
                               and t2.update_time >= t1.start_time
                               and t2.update_time &lt;= t1.end_time
                               and t2.freeze = 1
                               and t2.exceed = 1
                               and t2.inspection = 1
        where t1.start_time >= #{st}
          and t1.end_time &lt;= #{et}
          and t1.line_id = #{lineId}
        group by t1.id, t1.start_time, t1.end_time
        order by t1.start_time
    </select>
</mapper>
