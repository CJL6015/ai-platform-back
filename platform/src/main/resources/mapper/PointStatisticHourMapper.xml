<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seu.platform.dao.mapper.PointStatisticHourMapper">

    <resultMap id="BaseResultMap" type="com.seu.platform.dao.entity.PointStatisticHour">
        <result property="id" column="id" jdbcType="BIGINT"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="pointId" column="point_id" jdbcType="INTEGER"/>
        <result property="lineId" column="line_id" jdbcType="INTEGER"/>
        <result property="equipmentId" column="equipment_id" jdbcType="INTEGER"/>
        <result property="stopTime" column="stop_time" jdbcType="FLOAT"/>
        <result property="runTime" column="run_time" jdbcType="FLOAT"/>
        <result property="normalRefresh" column="normal_refresh" jdbcType="FLOAT"/>
        <result property="exceptionRefresh" column="exception_refresh" jdbcType="FLOAT"/>
        <result property="thresholdUpLowExceeded" column="threshold_up_low_exceeded" jdbcType="FLOAT"/>
        <result property="thresholdUpupLowlowExceeded" column="threshold_upup_lowlow_exceeded" jdbcType="FLOAT"/>
        <result property="upExceededDetails" column="up_exceeded_details" jdbcType="VARCHAR"/>
        <result property="lowExceededDetails" column="low_exceeded_details" jdbcType="VARCHAR"/>
        <result property="upupExceededDetails" column="upup_exceeded_details" jdbcType="VARCHAR"/>
        <result property="lowlowExceededDetails" column="lowlow_exceeded_details" jdbcType="VARCHAR"/>
        <result property="exceptionFreshDetails" column="exception_fresh_details" jdbcType="VARCHAR"/>
        <result property="upLowExceededCount" column="up_low_exceeded_count" jdbcType="INTEGER"/>
        <result property="upupLowlowExceededCount" column="upup_lowlow_exceeded_count" jdbcType="INTEGER"/>
        <result property="statiaticStartTime" column="statiatic_start_time" jdbcType="TIMESTAMP"/>
        <result property="statisticEndTime" column="statistic_end_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
                id, create_time, point_id,
                line_id, equipment_id, stop_time,
                run_time, normal_refresh, exception_refresh,
                threshold_up_low_exceeded, threshold_upup_lowlow_exceeded, up_exceeded_details,
                low_exceeded_details, upup_exceeded_details, lowlow_exceeded_details,
                exception_fresh_details, up_low_exceeded_count, upup_lowlow_exceeded_count,
                statiatic_start_time, statistic_end_time
    </sql>
    <select id="getOverrunCountMonth" resultType="com.seu.platform.model.dto.TrendDTO">
        select sum(t1.up_low_exceeded_count)         as count,
               cast(t1.statiatic_start_time as date) as time
        from point_statistic_hour t1,
             line_stop_run_statistic_hour t2
        where t1.line_id = t2.line_id
          and t1.statiatic_start_time = t2.start_time
          and t1.line_id = #{lineId}
          and t1.statiatic_start_time >= #{st}
          and t1.statiatic_start_time &lt;= #{et}
          and t2.start_time >= #{st}
          and t2.start_time &lt;= #{et}
          and t2.run_hour > 0.1
        group by cast(t1.statiatic_start_time as date)
        order by time
    </select>
    <select id="getOverrunCountDaily" resultType="com.seu.platform.model.dto.TrendDTO">
        select sum(up_low_exceeded_count) as count,
               statiatic_start_time       as time
        from point_statistic_hour
        where line_id = #{lineId}
          and statiatic_start_time >= dateadd(DAY, -1, (select max(statiatic_start_time)
                                                        from point_statistic_hour))
        group by statiatic_start_time
        order by statiatic_start_time
    </select>
    <select id="getBenchmarkDaily" resultType="com.seu.platform.model.dto.BenchmarkDTO">
        select t1.id                                 as equipment_id,
               t1.equipment_description              as equipment_name,
               sum(t2.up_low_exceeded_count)         as count,
               cast(t2.statiatic_start_time as date) as time
        from equipment_cfg t1
                 left join point_statistic_hour t2 on t1.id = t2.equipment_id
        where t2.line_id = #{lineId}
          and statiatic_start_time >= dateadd(DAY, #{num}, (select max(statiatic_start_time)
                                                            from point_statistic_hour))
        group by t1.id, t1.equipment_description, cast(t2.statiatic_start_time as date)
        order by time desc, equipment_id
    </select>
    <select id="getBenchmarkMonth" resultType="com.seu.platform.model.dto.BenchmarkDTO">
        select t1.id                                      as equipment_id,
               t1.equipment_description                   as equipment_name,
               sum(t2.up_low_exceeded_count)              as count,
               format(t2.statiatic_start_time, 'yyyy-MM') as time
        from equipment_cfg t1
                 left join point_statistic_hour t2 on t1.id = t2.equipment_id
        where t2.line_id = #{lineId}
          and statiatic_start_time >= dateadd(MONTH, -2, (select max(statiatic_start_time)
                                                          from point_statistic_hour))
        group by t1.id, t1.equipment_description, format(t2.statiatic_start_time, 'yyyy-MM')
        order by time desc, equipment_id
    </select>
    <select id="getTrendDetailMonth" resultType="com.seu.platform.model.dto.BenchmarkDTO">
        select t1.id                                 as equipment_id,
               t1.equipment_description              as equipment_name,
               sum(t2.up_low_exceeded_count)         as count,
               cast(t2.statiatic_start_time as date) as time
        from equipment_cfg t1
                 left join point_statistic_hour t2 on t1.id = t2.equipment_id
        where t2.line_id = #{lineId}
          and statiatic_start_time >= #{time}
        group by t1.id, t1.equipment_description, cast(t2.statiatic_start_time as date)
        order by time, equipment_id
    </select>
    <select id="getTrendDetailDaily" resultType="com.seu.platform.model.dto.BenchmarkDTO">
        select t1.id                         as equipment_id,
               t1.equipment_description      as equipment_name,
               sum(t2.up_low_exceeded_count) as count,
               t2.statiatic_start_time       as time
        from equipment_cfg t1
                 left join point_statistic_hour t2 on t1.id = t2.equipment_id
        where t2.line_id = #{lineId}
          and statiatic_start_time >= #{time}
        group by t1.id, t1.equipment_description, t2.statiatic_start_time
        order by time, equipment_id
    </select>
    <select id="getTotalTrend" resultType="com.seu.platform.model.dto.TrendDTO">
        select sum(up_low_exceeded_count)         as count,
               cast(statiatic_start_time as date) as time
        from point_statistic_hour
        where line_id = #{lineId}
          and statiatic_start_time >= #{st}
          and statiatic_start_time &lt;= #{et}
        group by cast(statiatic_start_time as date)
        order by time
    </select>
    <select id="getTimeOverrun" resultType="com.seu.platform.model.dto.HourTrendDTO">
        select sum(up_low_exceeded_count)           as count,
               DATEPART(HOUR, statiatic_start_time) as time
        from point_statistic_hour
        where statiatic_start_time >= #{st}
          and statiatic_start_time &lt;= #{et}
          and line_id = #{lineId}
        group by DATEPART(HOUR, statiatic_start_time)
        order by time
    </select>
    <select id="getDayCompare" resultType="com.seu.platform.model.dto.TrendDTO">
        select sum(up_low_exceeded_count) as count,
        cast(statiatic_start_time as date) as time
        from point_statistic_hour
        where cast(statiatic_start_time as date) in
        <foreach collection="times" open="(" close=")" item="time" separator=",">
            #{time}
        </foreach>
        group by cast(statiatic_start_time as date)
        order by time
    </select>
    <select id="getStatistic" resultType="com.seu.platform.dao.entity.PointStatistic">
        select sum(t2.exception_refresh)      as exception_refresh,
               sum(t2.normal_refresh)         as normal_refresh,
               sum(threshold_up_low_exceeded) as threshold_exceeded,
               sum(threshold_within)          as threshold_within,
               sum(t2.run_time)               as run_time,
               sum(t2.stop_time)              as stop_time

        from point_cfg t1
                 left join (select point_id,
                                   sum(exception_refresh)             as exception_refresh,
                                   sum(normal_refresh)                as normal_refresh,
                                   sum(threshold_up_low_exceeded)     as threshold_up_low_exceeded,
                                   sum(1 - threshold_up_low_exceeded) as threshold_within,
                                   sum(run_time)                      as run_time,
                                   sum(stop_time)                     as stop_time
                            from point_statistic_hour
                            where statiatic_start_time >= #{st}
                              and statiatic_start_time &lt;= #{et}
                              and line_id = #{lineId}
                            group by point_id) t2 on t1.point_id = t2.point_id
        where t1.line_id = #{lineId}
    </select>
    <select id="getScore" resultType="com.seu.platform.model.vo.ScoreVO">
        select t2.equipment_id                                                                          as id,
               t3.equipment_description                                                                 as name,
               sum(t1.up_low_exceeded_count * t2.score + t1.upup_lowlow_exceeded_count * t2.high_score) as score
        from point_statistic_hour t1 with (nolock)
                 left join
             point_cfg t2 with (nolock) on t1.point_id = t2.point_id
                 left join equipment_cfg t3 with (nolock) on t2.equipment_id = t3.id
        where t1.line_id = #{lineId}
          and t1.statiatic_start_time >= #{st}
          and t1.statiatic_start_time &lt;= #{et}
        group by t2.equipment_id, t3.equipment_description
        order by t2.equipment_id
    </select>
    <select id="getScoreDaily" resultType="com.seu.platform.model.vo.ScoreDailyVO">
        select sum(t1.up_low_exceeded_count * t2.score + t1.upup_lowlow_exceeded_count * t2.high_score) as score,
               cast(t1.statiatic_start_time as date)                                                    as time
        from point_statistic_hour t1
                 with (nolock)
                 left join
             point_cfg t2 with (nolock) on t1.point_id = t2.point_id
        where t1.line_id = #{lineId}
          and t1.statiatic_start_time >= #{st}
          and t1.statiatic_start_time &lt;= #{et}
        group by cast(t1.statiatic_start_time as date)
        order by time
    </select>
    <select id="getCount" resultType="java.lang.Integer">
        select sum(up_low_exceeded_count) as count
        from point_statistic_hour
        where statiatic_start_time >= #{st}
        and statiatic_start_time &lt;= #{et}
        and line_id=#{lineId}
        <if test="pointId != null and pointId >0">
            and point_id=#{pointId}
        </if>
    </select>
    <select id="getLineScore" resultType="java.lang.Double">
        select sum(t1.up_low_exceeded_count * t2.score + t1.upup_lowlow_exceeded_count * t2.high_score) as score
        from point_statistic_hour t1 with (nolock )
        left join
        point_cfg t2 with (nolock ) on t1.point_id = t2.point_id
        where t1.statiatic_start_time >= #{st}
        and t1.statiatic_start_time &lt;= #{et}
        <if test="lineId !=null">
            and t1.line_id = #{lineId}
        </if>
    </select>
    <select id="getCountAvg" resultType="java.lang.Integer">
        select sum(up_low_exceeded_count + upup_lowlow_exceeded_count) as count
        from point_statistic_hour with (nolock)
        where statiatic_start_time >= #{st}
          and statiatic_start_time &lt;= #{et}
          and line_id = #{lineId}
    </select>
    <select id="getTopPoint" resultType="com.seu.platform.model.dto.CountStatisticDTO">
        select top 4 t1.description                as name,
                     sum(t2.up_low_exceeded_count) as count
        from point_cfg t1 with (nolock),
             point_statistic_hour t2 with (nolock)
        where t1.line_id = #{lineId}
          and t1.point_id = t2.point_id
          and t2.statiatic_start_time >= #{st}
          and t2.statiatic_start_time &lt;= #{et}
        group by t1.description
        order by count desc
    </select>
    <select id="getTopEquipment" resultType="com.seu.platform.model.dto.CountStatisticDTO">
        select top 4 t1.equipment_description      as name,
                     sum(t2.up_low_exceeded_count) as count
        from equipment_cfg t1 with (nolock),
             point_statistic_hour t2 with (nolock)
        where t1.line_id = #{lineId}
          and t1.line_id = t2.line_id
          and t2.statiatic_start_time >= #{st}
          and t2.statiatic_start_time &lt;= #{et}
        group by t1.equipment_description
        order by count desc
    </select>
    <select id="getTopTime" resultType="com.seu.platform.model.dto.CountStatisticDTO">
        select top 4 sum(up_low_exceeded_count)           as count,
                     DATEPART(HOUR, statiatic_start_time) as name
        from point_statistic_hour with (nolock)
        where statiatic_start_time >= #{st}
          and statiatic_start_time &lt;= #{et}
          and line_id = #{lineId}
        group by DATEPART(HOUR, statiatic_start_time)
        order by count desc
    </select>
    <select id="getRelationEquipment" resultType="java.lang.String">
        select STRING_AGG(equipment_id, ',') AS ids
        from point_statistic_hour with (nolock)
        where line_id = #{lineId}
          and statiatic_start_time >= #{st}
          and statiatic_start_time &lt;= #{et}
          and up_low_exceeded_count > 0
        group by DATEADD(HOUR, DATEDIFF(HOUR, 0, statiatic_start_time), 0)
    </select>
    <select id="getRelationPoint" resultType="java.lang.String">
        select STRING_AGG(point_id, ',') AS ids
        from point_statistic_hour with (nolock)
        where line_id = #{lineId}
          and statiatic_start_time >= #{st}
          and statiatic_start_time &lt;= #{et}
          and up_low_exceeded_count > 0
        group by DATEADD(HOUR, DATEDIFF(HOUR, 0, statiatic_start_time), 0)
    </select>
    <select id="getCounts" resultType="java.lang.Integer">
        select sum(COALESCE(t2.up_low_exceeded_count, 0))
        from equipment_cfg t1
                 left join (select sum(up_low_exceeded_count) as up_low_exceeded_count,
                                   equipment_id
                            from point_statistic_hour
                            where statiatic_start_time >= #{st}
                              and statiatic_start_time &lt;= #{et}
                              and line_id = #{lineId}
                            group by equipment_id) t2
                           on t1.id = t2.equipment_id
        where t1.line_id = #{lineId}
        group by t1.id
        order by t1.id
    </select>
    <select id="getPlantScore" resultType="java.lang.Double">
        select sum(t1.up_low_exceeded_count * t2.score + t1.upup_lowlow_exceeded_count * t2.high_score) as score
        from point_statistic_hour t1
        left join
        point_cfg t2 on t1.point_id = t2.point_id
        ,production_line t3
        where t1.line_id=t3.id
        and t1.statiatic_start_time >= #{st}
        and t1.statiatic_start_time &lt;= #{et}
        <if test="plantId !=null">
            and t3.plant_id = #{plantId}
        </if>
    </select>
</mapper>
