<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seu.platform.dao.mapper.ProcessLinePictureHistMapper">

    <resultMap id="BaseResultMap" type="com.seu.platform.dao.entity.ProcessLinePictureHist">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="cameraId" column="camera_id" jdbcType="VARCHAR"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="picturePath" column="picture_path" jdbcType="VARCHAR"/>
        <result property="peopleHasChecked" column="people_has_checked" jdbcType="TINYINT"/>
        <result property="detectionPicturePath" column="detection_picture_path" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Base_Column_List">
                id, camera_id, update_time,
                picture_path, people_has_checked, detection_picture_path
    </sql>
    <select id="getPendingChecks" resultType="com.seu.platform.dao.entity.ProcessLinePictureHist">
        select top #{count} camera_id,
                            min(picture_path) as picture_path,
                            min(id)           as id
        from process_line_picture_hist
        where people_has_checked = 0
        GROUP BY camera_id
        ORDER BY COUNT(camera_id), camera_id
    </select>
    <select id="getDetectionResult" resultType="com.seu.platform.model.vo.DetectionResultVO">
        select camera_id,
        DATEADD(HOUR, DATEDIFF(HOUR, 0, update_time), 0) as time ,
        detection_picture_path,people_count
        from (
        select camera_id,
        update_time,
        detection_picture_path,
        people_count,
        row_number() over (partition by camera_id order
        by update_time) as rtn
        from process_line_picture_hist
        where people_has_checked=0
        and camera_id in
        <foreach collection="ips" separator="," item="ip" open="(" close=")">
            #{ip}
        </foreach>
        and DATEADD(HOUR, DATEDIFF(HOUR, 0, update_time), 0)=#{time}
        ) ranked
        where rtn =1
    </select>
    <select id="lastTime" resultType="java.util.Date">
        select DATEADD(HOUR, DATEDIFF(HOUR, 0, max(update_time)), 0) as time
        from process_line_picture_hist
    </select>
    <select id="getMonthTrend" resultType="com.seu.platform.model.dto.TrendDTO">
        select sum(IIF(people_count > 1, 1, 0)) as count,
               cast(update_time as date)        as time
        from process_line_picture_hist
        where update_time >= #{st}
          and update_time &lt;= #{et}
        group by cast(update_time as date)
        order by time
    </select>
    <select id="getDailyTrend" resultType="com.seu.platform.model.dto.TrendDTO">
        select sum(IIF(people_count > 1, 1, 0)) as count,
               update_time                      as time
        from process_line_picture_hist
        where update_time >= dateadd(DAY, -1, (select max(update_time)
                                               from process_line_picture_hist))
        group by update_time
        order by update_time
    </select>
    <select id="getPeopleTrend" resultType="com.seu.platform.model.dto.DetectionTrendDTO">
        select t1.id,
               t1.camera_description as name,
               sum(t2.count)         as count,
               t2.time,
               max(t2.people_count)  as max_count
        from camera_cfg t1
                 left join (select camera_id,
                                   1                         as count,
                                   cast(update_time as date) as time,
                                   people_count
                            from process_line_picture_hist_1
                            where process_line_picture_hist_1.update_time >= #{st}
                              and process_line_picture_hist_1.update_time &lt;= #{et}
                              and process_line_picture_hist_1.exceed = 1) t2 on t1.camera_ip = t2.camera_id
        where t1.line_id = #{lineId}
          and time is not null
        group by t1.id, t1.camera_description, t2.time
        order by id, time
    </select>
    <select id="getTotalTrend" resultType="com.seu.platform.model.dto.TrendDTO">
        select sum(iif(t1.exceed = 1, 1, 0)) as count,
               cast(t1.update_time as date)  as time
        from process_line_picture_hist_1 t1,
             camera_cfg t2
        where t1.camera_id = t2.camera_ip
          and t2.line_id = #{lineId}
          and t1.update_time >= #{st}
          and t1.update_time &lt;= #{et}
        group by cast(t1.update_time as date)
        order by time
    </select>
    <select id="getTimeOverrun" resultType="com.seu.platform.model.dto.HourTrendDTO">
        select sum(iif(t1.exceed = 1, 1, 0))  as count,
               DATEPART(HOUR, t1.update_time) as time
        from process_line_picture_hist_1 t1,
             camera_cfg t2
        where t1.camera_id = t2.camera_ip
          and t2.line_id = #{lineId}
          and t1.update_time >= #{st}
          and t1.update_time &lt;= #{et}
        group by DATEPART(HOUR, t1.update_time)
        order by time
    </select>
</mapper>
