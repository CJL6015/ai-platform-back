<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seu.platform.dao.mapper.ProcessLinePictureHistMapper">

    <resultMap id="BaseResultMap" type="com.seu.platform.dao.entity.ProcessLinePictureHist">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="cameraId" column="camera_id" jdbcType="VARCHAR"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="picturePath" column="picture_path" jdbcType="VARCHAR"/>
        <result property="peopleHasChecked" column="people_has_checked" jdbcType="TINYINT"/>
        <result property="detectionPicturePath" column="detection_picture_path" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Base_Column_List">
                id, camera_id, update_time,
                picture_path, people_has_checked, detection_picture_path
    </sql>
    <update id="setInspectionMinute">
        update process_line_picture_hist
        set inspection =1
        where id = (select top 1 id
                    from process_line_picture_hist
                    where update_time >= #{st}
                      and update_time &lt;= #{et}
                      and camera_id = #{cameraIp}
                    ORDER BY NEWID())
    </update>

    <update id="setInspectionMinute1">
        update process_line_picture_hist
        set inspection =2
        where id = (select top 1 id
                    from process_line_picture_hist
                    where update_time >= #{st}
                      and update_time &lt;= #{et}
                      and camera_id = #{cameraIp}
                      and inspection is null
                    ORDER BY NEWID())
    </update>
    <select id="getPendingChecks" resultType="com.seu.platform.dao.entity.ProcessLinePictureHist">
        select top 9 camera_id,
                     min(picture_path) as picture_path,
                     min(id)           as id
        from process_line_picture_hist
        where people_has_checked = 0
        GROUP BY camera_id
        ORDER BY COUNT(camera_id), camera_id
    </select>
    <select id="getDetectionResult" resultType="com.seu.platform.model.vo.DetectionResultVO">
        select camera_id,
        DATEADD(HOUR, DATEDIFF(HOUR, 0, update_time), 0) as time ,
        detection_picture_path,people_count
        from (
        select camera_id,
        update_time,
        detection_picture_path,
        people_count,
        row_number() over (partition by camera_id order
        by update_time) as rtn
        from process_line_picture_hist
        with (nolock)
        where people_has_checked=1
        and camera_id in
        <foreach collection="ips" separator="," item="ip" open="(" close=")">
            #{ip}
        </foreach>
        and DATEADD(HOUR, DATEDIFF(HOUR, 0, update_time), 0)=#{time}
        and inspection=1
        ) ranked
        where rtn =1
        order by time desc
    </select>
    <select id="lastTime" resultType="java.util.Date">
        select DATEADD(HOUR, DATEDIFF(HOUR, 0, max(update_time)), 0) as time
        from process_line_picture_hist
                 with (nolock)
        where people_has_checked = 1
          and inspection = 1
    </select>
    <select id="getMonthTrend" resultType="com.seu.platform.model.dto.TrendDTO">
        select sum(IIF(t1.exceed = 1, 1, 0)) as count,
               cast(t1.update_time as date)  as time
        from process_line_picture_hist t1 with (nolock),
             camera_cfg t2 with (nolock)
        where t1.camera_id = t2.camera_ip
          and t2.line_id = #{lineId}
          and t1.update_time >= #{st}
          and t1.update_time &lt;= #{et}
          and t1.inspection = 1
          and t1.people_has_checked = 1
        group by cast(t1.update_time as date)
        order by time
    </select>
    <select id="getDailyTrend" resultType="com.seu.platform.model.dto.TrendDTO">
        select sum(IIF(people_count > 1, 1, 0)) as count,
               t1.update_time                   as time
        from process_line_picture_hist t1 with (nolock),
             camera_cfg t2 with (nolock)
        where t1.camera_id = t2.camera_ip
          and t2.line_id = #{lineId}
          and t1.update_time >= dateadd(DAY, -1, (select max(update_time)
                                                  from process_line_picture_hist))
        group by t1.update_time
        order by t1.update_time
    </select>
    <select id="getPeopleTrend" resultType="com.seu.platform.model.dto.DetectionTrendDTO">
        select t1.id,
               t1.camera_description as name,
               sum(t2.count)         as count,
               t2.time,
               max(t2.people_count)  as max_count
        from camera_cfg t1
                 with (nolock)
                 left join (select camera_id,
                                   IIF(process_line_picture_hist.exceed = 1, 1, 0) as count,
                                   cast(update_time as date)                       as time,
                                   people_count
                            from process_line_picture_hist
                                     with (nolock)
                            where process_line_picture_hist.update_time >= #{st}
                              and process_line_picture_hist.update_time &lt;= #{et}) t2 on t1.camera_ip = t2.camera_id
        where t1.line_id = #{lineId}
          and time is not null
        group by t1.id, t1.camera_description, t2.time
        order by id, time
    </select>
    <select id="getTotalTrend" resultType="com.seu.platform.model.dto.TrendDTO">
        select sum(iif(t1.exceed = 1, 1, 0)) as count,
               cast(t1.update_time as date)  as time
        from process_line_picture_hist t1 with (nolock),
             camera_cfg t2
                 with (nolock)
        where t1.camera_id = t2.camera_ip
          and t2.line_id = #{lineId}
          and t1.update_time >= #{st}
          and t1.update_time &lt;= #{et}
        group by cast(t1.update_time as date)
        order by time
    </select>
    <select id="getTimeOverrun" resultType="com.seu.platform.model.dto.HourTrendDTO">
        select sum(iif(t1.exceed = 1, 1, 0))  as count,
               DATEPART(HOUR, t1.update_time) as time
        from process_line_picture_hist t1 with (nolock),
             camera_cfg t2 with (nolock)
        where t1.camera_id = t2.camera_ip
          and t2.line_id = #{lineId}
          and t1.update_time >= #{st}
          and t1.update_time &lt;= #{et}
        group by DATEPART(HOUR, t1.update_time)
        order by time
    </select>
    <select id="getScoreDaily" resultType="com.seu.platform.model.dto.TrendDTO">
        select sum(iif(t1.exceed = 1, 1, 0)) as count,
               cast(t1.update_time as date)  as time
        from process_line_picture_hist t1 with (nolock),
             camera_cfg t2 with (nolock)
        where t1.camera_id = t2.camera_ip
          and t2.line_id = #{lineId}
          and t1.update_time >= #{st}
          and t1.update_time &lt;= #{et}
          and t1.inspection = 1
        group by cast(t1.update_time as date)
        order by time
    </select>
    <select id="getExceedCount" resultType="java.lang.Integer">
        select sum(iif(t1.exceed = 1, 1, 0)) as count
        from process_line_picture_hist t1 with (nolock),
        camera_cfg t2
        with (nolock)
        where t1.camera_id = t2.camera_ip
        <if test="lineId != null">
            and t2.line_id = #{lineId}
        </if>
        and t1.update_time >= #{st}
        and t1.update_time &lt;= #{et}
        and t1.inspection = 1
    </select>
    <select id="getTopTime" resultType="com.seu.platform.model.dto.CountStatisticDTO">
        select sum(iif(t1.exceed = 1, 1, 0))  as count,
               DATEPART(HOUR, t1.update_time) as name
        from process_line_picture_hist t1 with (nolock),
             camera_cfg t2
                 with (nolock)
        where t1.camera_id = t2.camera_ip
          and t2.line_id = #{lineId}
          and t1.update_time >= #{st}
          and t1.update_time &lt;= #{et}
        group by DATEPART(HOUR, t1.update_time)
        order by count desc
    </select>
    <select id="exceedCount" resultType="java.lang.Integer">
        select count(t2.id) as count
        from camera_cfg t1 with (nolock),
             process_line_picture_hist t2
                 with (nolock)
        where t1.camera_ip = t2.camera_id
          and t2.exceed = 1
          and t2.update_time >= #{st}
          and t2.update_time &lt;= #{et}
          and t1.line_id = #{lineId}
          and t2.inspection = 1
    </select>
    <select id="getTopProcess" resultType="com.seu.platform.model.dto.CountStatisticDTO">
        select sum(iif(t1.exceed = 1, 1, 0)) as count,
               t2.camera_description         as name
        from process_line_picture_hist t1 with (nolock),
             camera_cfg t2
                 with (nolock)
        where t1.camera_id = t2.camera_ip
          and t2.line_id = #{lineId}
          and t1.update_time >= #{st}
          and t1.update_time &lt;= #{et}
        group by t2.camera_description
        order by count desc
    </select>
    <select id="getLast" resultType="com.seu.platform.model.entity.LineInspection">
        select max(t1.update_time)                 as time,
               t2.line_id,
               t2.camera_ip,
               max(t3.inspection_capture_interval) as interval,
               max(t3.inspection_capture_mode)     as mode
        from camera_cfg t2 with (nolock)
                 left join inspection_cfg t3 with (nolock) on t2.line_id = t3.line_id
                 left join process_line_picture_hist t1 with (nolock)
                           on t1.camera_id = t2.camera_ip
                               and t1.inspection = 1
        group by t2.camera_ip, t2.line_id
    </select>

    <select id="getLast1" resultType="com.seu.platform.model.entity.LineInspection">
        select max(t1.update_time)                 as time,
               t2.line_id,
               t2.camera_ip,
               max(t3.inspection_capture_interval) as interval,
               max(t3.inspection_capture_mode)     as mode
        from camera_cfg t2 with (nolock)
                 left join inspection_cfg t3 with (nolock) on t2.line_id = t3.line_id
                 left join process_line_picture_hist t1 with (nolock)
                           on t1.camera_id = t2.camera_ip
                               and t1.inspection = 2
        group by t2.camera_ip, t2.line_id
    </select>
    <select id="getFirstTime" resultType="java.util.Date">
        select top 1 update_time
        from process_line_picture_hist
        order by update_time
    </select>

    <select id="getCount" resultType="java.lang.Integer">
        select count(*) as count
        from process_line_picture_hist t1
        with (nolock) ,camera_cfg t2 with (nolock)
        where t1.camera_id=t2.camera_ip
        <if test="lineId != null and lineId != -1">
            and t2.line_id=#{lineId}
        </if>
        and t1.exceed = 1
        and t1.update_time >= #{st}
        and t1.update_time &lt;= #{et}
        and t1.inspection = 1
        <if test="cameraIp != null and cameraIp !='-1'">
            and t1.camera_id = #{cameraIp}
        </if>
    </select>
    <select id="getNextTime" resultType="java.util.Date">
        select top 1 update_time
        from process_line_picture_hist
                 with (nolock)
        where update_time >= #{st}
          and camera_id = #{cameraIp}
        order by update_time
    </select>
    <select id="getDetectionTime" resultType="java.util.Date">
        select update_time as time
        from process_line_picture_hist t1
                 with (nolock)
        where t1.camera_id = (select top 1 camera_ip from camera_cfg with (nolock) where line_id = #{lineId})
          and t1.inspection = 1
          and t1.people_has_checked = 1
          and t1.update_time >= #{st}
          and t1.update_time &lt;= #{et}
        order by time desc
    </select>
    <select id="getCounts" resultType="java.lang.Integer">
        select sum(COALESCE(t2.count, 0)) as count
        from camera_cfg t1
                 with (nolock)
                 left join(select 1 as count,
                                  camera_id
                           from process_line_picture_hist
                                    with (nolock)
                           where inspection = 1
                             and people_has_checked = 1
                             and people_count > 1
                             and update_time >= #{st}
                             and update_time &lt;= #{et}) t2
                          on t1.camera_ip = t2.camera_id
        where line_id = #{lineId}
        group by t1.id
        order by t1.id
    </select>
    <select id="getPicturePathString" resultType="java.lang.String">
        select top 1 picture_path
        from process_line_picture_hist with (nolock)
        where camera_id = #{cameraIp}
        order by update_time desc
    </select>
    <select id="getPeopleCounts" resultType="com.seu.platform.model.dto.PeopleCounts">
        select count(1) as count,
        t2.camera_description as name
        from process_line_picture_hist t1
        with (nolock) ,camera_cfg t2 with (nolock)
        where t1.camera_id=t2.camera_ip
        <if test="lineId != null and lineId != -1">
            and t2.line_id=#{lineId}
        </if>
        and t1.exceed = 1
        and t1.update_time >= #{st}
        and t1.update_time &lt;= #{et}
        and t1.inspection = 1
        <if test="cameraIp != null and cameraIp !='-1'">
            and t1.camera_id = #{cameraIp}
        </if>
        group by t2.camera_description
        order by count desc
    </select>
    <select id="getTopCamera" resultType="java.lang.String">
        select top 1 t2.camera_description as name
        from camera_cfg t2 with (nolock) left join process_line_picture_hist t1
        with (nolock) on t1.camera_id=t2.camera_ip
        where
        t1.exceed = 1
        <if test="lineId != null and lineId != -1">
            and t2.line_id=#{lineId}
        </if>
        and t1.update_time >= #{st}
        and t1.update_time &lt;= #{et}
        and t1.inspection = 1
        <if test="cameraIp != null and cameraIp !='-1'">
            and t1.camera_id = #{cameraIp}
        </if>
        group by t2.camera_description
        order by count(1) desc
    </select>
    <select id="getInspectionExceed" resultType="com.seu.platform.model.dto.ExceedDTO">
        select count(1) as total,
        sum(iif(t1.exceed=1,1,0)) as exceed
        from process_line_picture_hist t1
        with (nolock) ,camera_cfg t2 with (nolock)
        where t1.camera_id=t2.camera_ip
        <if test="lineId != null and lineId != -1">
            and t2.line_id=#{lineId}
        </if>
        and t1.update_time >= #{st}
        and t1.update_time &lt;= #{et}
        and t1.inspection = 1
        <if test="cameraIp != null and cameraIp !='-1'">
            and t1.camera_id = #{cameraIp}
        </if>
    </select>
    <select id="getExceedCamera" resultType="com.seu.platform.model.dto.ExceedDTO">

    </select>
    <select id="getLineInspection" resultType="com.seu.platform.model.dto.InspectionStatisticDTO">
        select sum(iif(t1.exceed = 1, 1, 0)) as exceed,
               t2.camera_description         as name,
               count(1)                      as count
        from process_line_picture_hist t1 with (nolock),
             camera_cfg t2
                 with (nolock)
        where t1.camera_id = t2.camera_ip
          and t2.line_id = #{lineId}
          and t1.update_time >= #{st}
          and t1.update_time &lt;= #{et}
          and inspection = 1
        group by t2.camera_description
        order by count desc
    </select>
    <select id="getLineInspectionHistory" resultType="com.seu.platform.model.dto.InspectionStatisticDTO">
        select sum(iif(t1.exceed = 1, 1, 0)) as exceed,
               t2.camera_description         as name,
               count(1)                      as count
        from process_line_picture_hist t1 with (nolock),
             camera_cfg t2
                 with (nolock)
        where t1.camera_id = t2.camera_ip
          and t2.line_id = #{lineId}
          and t1.update_time >= #{st}
          and t1.update_time &lt;= #{et}
          and t1.inspection = 1
        group by t2.camera_description
        order by count desc
    </select>
    <select id="getExceed" resultType="com.seu.platform.model.dto.ExceedDTO">
        select count(1) as total,
        sum(iif(t1.exceed=1,1,0)) as exceed
        from process_line_picture_hist t1
        with (nolock) ,camera_cfg t2 with (nolock)
        where t1.camera_id=t2.camera_ip
        <if test="lineId != null and lineId != -1">
            and t2.line_id=#{lineId}
        </if>
        and t1.update_time >= #{st}
        and t1.update_time &lt;= #{et}
        <if test="cameraIp != null and cameraIp !='-1'">
            and t1.camera_id = #{cameraIp}
        </if>
    </select>

</mapper>
